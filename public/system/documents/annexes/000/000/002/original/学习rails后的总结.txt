1、在开讲之前，首先得感谢龙老师给与的这次演示的机会，其次得感谢谌毅学长、高万庆学长、娄宇学长在这段时间对我的关照。谢谢。
2、我这次演讲的核心问题将会以我目前对rails框架的了解，以及如何处理业务的思路两方面，重点说明。
3、在介绍rails框架之前，我们先浏览一下我这些天制作的一个简易项目（大学实训管理系统）。
3.1观看（整个演示流程）

4、我接下来要讲的是关于我目前对rails框架的理解。
rails框架的指导原则是don't repeat yourself(DRY)，不要重复自己。约定优于配置（convention over configuration）。这也可能是大多数程序员喜欢rails框架的原因。rails可以被分解成两个核心库：ActiveRecord和ActionPack。。AR是一种对象关系映射库（object relational mapping）。而AP则封装了核心控制器以及一个视图模版引擎。
但是对我来说，rails框架，我把它主要模块分成了四个，也就是MVCH。
其中的M，也就是经常说到的model（模型），这一个模块与AR库联系紧密，通常是用来处理业务中涉及到的数据进行持久化存储的话，这一系列的数据操作，便会在model模型中进行数据的增删改查的数据操作。当然，这仅是严格意义上的数据操作，比如，像后面的C模块，也时常涉及到数据的一些简单操作。这一模块除了数据的持久化操作之外，通常数据的规范性验证，比如用户名是否唯一，密码是否可以为空，电子邮件格式是否正确等。这一系列的验证仅是数据验证的一种。。。model模块还有一个非常重要的用处，平时项目的实体之间必然会存在联系，而在model模块中，可以声明这些实体之间的关联关系。
V代表的是View，即视图模板模块。view视图是由嵌入ruby的html代码组成的。其主要作用就是将数据展示给我们，当然，通常也会涉及到一些简单的逻辑处理。
C说的就是controller控制器。控制器的作用是相当重要的，它是沟通model与view的桥梁，当路由决定使用哪个控制器处理请求后，控制器就会解析请求，并生成对应的请求，Controller 会代为处理大多数底层工作，使用易懂的约定，让整个过程清晰明了。
在大多数按照 REST 规范开发的程序中，控制器会接收请求，从模型中获取数据，或把数据写入模型，再通过视图生成 HTML。如果控制器需要做其他操作，也没问题，以上只不过是控制器的主要作用。
H即Helper帮助方法。由于controller只会生成index，show,edit,destroy,update,new,create七个方法。平时项目的业务操作，除了这几个方法，还会用到其他的方法来作为辅助完成业务操作，当然，将这种辅助操作放在controller中，也是可以的。如果大量的辅助方法放于controller中，则会造成一些性能问题。因此，通常会将这些方法，统一放到helper类中，在需要用到它的地方，直接进行方法调用就行。
这几个部分在整个项目开发中是很重要的业务处理的模块。因此，是相当重要的。
接下来讲解的两个部分也是非常重要的模块。就是前面提到的AR和Route模块，其中AR模块是rails一个非常重要的核心库，正是因为这一封装好的数据库操作库，给rails数据的持久化操作带来了很大程度上的方便。
另外一个就是Route路由，所有的请求首先都会通过route路由，当请求到达路由时，便会通过路由表，进行请求地址的查询，然后找到对应控制器的对应action，进行业务的操作。
最后说到的是关于rails――gems插件的一些想法，在说明之前，有必要说清楚一个事情，那就是gems插件只是作为辅助类工具在为rails服务，并不是rails的主题。当然，程序开发中，使用一些插件，不仅能帮助我们快速构建复杂的应用，而且能帮我们节约大量的资源。比如说devise插件，这一款插件是用来构建用户的基本功能的，另一款，cancan插件，则是用来为不同的用户设定不同的访问权限，诸如此类的插件，还有很多。。。若是程序完全不用插件，后果也是很明显的，比如，在实际项目开发中，我不使用cancan这一插件，要想在程序中实现类似的功能的话，代码工作量至少会上升到4-5倍，而且还不便于维护。当然，在使用插件的这一问题上，也不是说程序中使用的gem插件越多越好，在使用一些插件的同时，要意识到，每个带进rails应用程序的gem包，都可能依赖于其他的gem包，反过来，这些gem包又可能会依赖另外一些gem包，从而造成rails程序的体积过大，这不仅降低了程序在生产环境中的性能，还可能造成用户体验变差，另外也会消耗大量的内存，使得rails启动时间变慢，降低开发效率等等一系列不利因素。所以，在使用一个插件时，应该考虑到各方面的因素在采取行动。

